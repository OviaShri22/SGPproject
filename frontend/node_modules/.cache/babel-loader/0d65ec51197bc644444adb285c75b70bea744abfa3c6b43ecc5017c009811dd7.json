{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst mongoose = require('mongoose');\nconst Complaint = require('../models/Complaint');\nconst Faculty = require('../models/Faculty');\nconst multer = require('multer');\n\n// Configure multer for file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/'); // Make sure this directory exists\n  },\n  filename: function (req, file, cb) {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + '-' + file.originalname);\n  }\n});\nconst upload = multer({\n  storage: storage\n});\n\n// Function to determine severity\nconst determineSeverity = complaintText => {\n  if (complaintText.includes('ragging') || complaintText.includes('cannot understand') || complaintText.includes('Ragging')) {\n    return 'High';\n  } else if (complaintText.includes('not available') || complaintText.includes('scholarship')) {\n    return 'Medium';\n  } else {\n    return 'Low';\n  }\n};\n\n// GET /api/complaints - Fetch complaints (all or by email)\nrouter.get('/', async (req, res) => {\n  try {\n    const {\n      email\n    } = req.query;\n    if (email) {\n      const studentComplaints = await Complaint.find({\n        email\n      });\n      return res.status(200).json(studentComplaints);\n    }\n    const allComplaints = await Complaint.find().populate('assignedFaculty');\n    res.status(200).json(allComplaints);\n  } catch (error) {\n    console.error('Error fetching complaints:', error);\n    res.status(500).json({\n      message: 'Error fetching complaints',\n      error\n    });\n  }\n});\n\n// GET /api/complaints/:id - Fetch a single complaint by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const complaint = await Complaint.findById(req.params.id).populate('assignedFaculty');\n    if (!complaint) {\n      return res.status(404).json({\n        message: 'Complaint not found'\n      });\n    }\n    res.status(200).json(complaint);\n  } catch (error) {\n    console.error('Error fetching complaint:', error);\n    res.status(500).json({\n      message: 'Error fetching complaint',\n      error\n    });\n  }\n});\n\n// POST /api/complaints - Create a new complaint with file upload\nrouter.post('/', upload.single('document'), async (req, res) => {\n  try {\n    const {\n      rollNo,\n      email,\n      type,\n      expertise,\n      complaint,\n      anonymous\n    } = req.body;\n    const severity = determineSeverity(complaint);\n    const newComplaint = new Complaint({\n      rollNo: rollNo || null,\n      email: email || null,\n      type,\n      expertise,\n      complaint,\n      severity,\n      status: 'Complaint Raised',\n      document: req.file ? req.file.path : null,\n      anonymous\n    });\n    await newComplaint.save();\n    res.status(201).json(newComplaint);\n  } catch (error) {\n    console.error('Error creating complaint:', error);\n    res.status(500).json({\n      message: 'Error creating complaint',\n      error\n    });\n  }\n});\n\n// PUT /api/complaints/:id - Assign a faculty to a complaint\nrouter.put('/:id', async (req, res) => {\n  const complaintId = req.params.id;\n  const {\n    assignedFaculty\n  } = req.body;\n  try {\n    const updatedComplaint = await Complaint.findByIdAndUpdate(complaintId, {\n      assignedFaculty,\n      assignedAt: new Date()\n    }, {\n      new: true\n    }).populate('assignedFaculty');\n    if (!updatedComplaint) {\n      return res.status(404).json({\n        message: 'Complaint not found'\n      });\n    }\n    res.status(200).json(updatedComplaint);\n  } catch (error) {\n    console.error('Error assigning faculty:', error);\n    res.status(500).json({\n      message: 'Error assigning Faculty',\n      error\n    });\n  }\n});\n\n// PUT /api/complaints/status/:id - Update complaint status\nrouter.put('/status/:id', async (req, res) => {\n  try {\n    const {\n      id\n    } = req.params;\n    const {\n      status\n    } = req.body;\n    const updatedComplaint = await Complaint.findByIdAndUpdate(id, {\n      status\n    }, {\n      new: true\n    });\n    if (!updatedComplaint) {\n      return res.status(404).json({\n        message: 'Complaint not found'\n      });\n    }\n    res.json(updatedComplaint);\n  } catch (error) {\n    console.error('Error updating complaint status:', error);\n    res.status(500).json({\n      message: 'Error updating complaint status',\n      error\n    });\n  }\n});\n\n// DELETE /api/complaints/:id - Delete a complaint by ID\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const deletedComplaint = await Complaint.findByIdAndDelete(req.params.id);\n    if (!deletedComplaint) {\n      return res.status(404).json({\n        message: 'Complaint not found'\n      });\n    }\n    res.status(200).json({\n      message: 'Complaint deleted successfully'\n    });\n  } catch (error) {\n    console.error('Error deleting complaint:', error);\n    res.status(500).json({\n      message: 'Error deleting complaint',\n      error\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","mongoose","Complaint","Faculty","multer","storage","diskStorage","destination","req","file","cb","filename","uniqueSuffix","Date","now","Math","round","random","fieldname","originalname","upload","determineSeverity","complaintText","includes","get","res","email","query","studentComplaints","find","status","json","allComplaints","populate","error","console","message","complaint","findById","params","id","post","single","rollNo","type","expertise","anonymous","body","severity","newComplaint","document","path","save","put","complaintId","assignedFaculty","updatedComplaint","findByIdAndUpdate","assignedAt","new","delete","deletedComplaint","findByIdAndDelete","module","exports"],"sources":["E:/backup_project/review_1/SGP/frontend/src/components/RegisterComplaint.jsx"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst mongoose = require('mongoose');\r\nconst Complaint = require('../models/Complaint');\r\nconst Faculty = require('../models/Faculty');\r\nconst multer = require('multer');\r\n\r\n// Configure multer for file uploads\r\nconst storage = multer.diskStorage({\r\n  destination: function (req, file, cb) {\r\n    cb(null, 'uploads/'); // Make sure this directory exists\r\n  },\r\n  filename: function (req, file, cb) {\r\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\r\n    cb(null, file.fieldname + '-' + uniqueSuffix + '-' + file.originalname);\r\n  }\r\n});\r\n\r\nconst upload = multer({ storage: storage });\r\n\r\n// Function to determine severity\r\nconst determineSeverity = (complaintText) => {\r\n  if (complaintText.includes('ragging') || complaintText.includes('cannot understand') || complaintText.includes('Ragging')) {\r\n    return 'High';\r\n  } else if (complaintText.includes('not available') || complaintText.includes('scholarship')) {\r\n    return 'Medium';\r\n  } else {\r\n    return 'Low';\r\n  }\r\n};\r\n\r\n// GET /api/complaints - Fetch complaints (all or by email)\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const { email } = req.query;\r\n    if (email) {\r\n      const studentComplaints = await Complaint.find({ email });\r\n      return res.status(200).json(studentComplaints);\r\n    }\r\n    const allComplaints = await Complaint.find().populate('assignedFaculty');\r\n    res.status(200).json(allComplaints);\r\n  } catch (error) {\r\n    console.error('Error fetching complaints:', error);\r\n    res.status(500).json({ message: 'Error fetching complaints', error });\r\n  }\r\n});\r\n\r\n// GET /api/complaints/:id - Fetch a single complaint by ID\r\nrouter.get('/:id', async (req, res) => {\r\n  try {\r\n    const complaint = await Complaint.findById(req.params.id).populate('assignedFaculty');\r\n    if (!complaint) {\r\n      return res.status(404).json({ message: 'Complaint not found' });\r\n    }\r\n    res.status(200).json(complaint);\r\n  } catch (error) {\r\n    console.error('Error fetching complaint:', error);\r\n    res.status(500).json({ message: 'Error fetching complaint', error });\r\n  }\r\n});\r\n\r\n// POST /api/complaints - Create a new complaint with file upload\r\nrouter.post('/', upload.single('document'), async (req, res) => {\r\n  try {\r\n    const { rollNo, email, type, expertise, complaint, anonymous } = req.body;\r\n\r\n    const severity = determineSeverity(complaint);\r\n\r\n    const newComplaint = new Complaint({\r\n      rollNo: rollNo || null,\r\n      email:  email || null,\r\n      type,\r\n      expertise,\r\n      complaint,\r\n      severity,\r\n      status: 'Complaint Raised',\r\n      document: req.file ? req.file.path : null,\r\n      anonymous,\r\n    });\r\n\r\n    await newComplaint.save();\r\n    res.status(201).json(newComplaint);\r\n  } catch (error) {\r\n    console.error('Error creating complaint:', error);\r\n    res.status(500).json({ message: 'Error creating complaint', error });\r\n  }\r\n});\r\n\r\n// PUT /api/complaints/:id - Assign a faculty to a complaint\r\nrouter.put('/:id', async (req, res) => {\r\n  const complaintId = req.params.id;\r\n  const { assignedFaculty } = req.body;\r\n  try {\r\n    const updatedComplaint = await Complaint.findByIdAndUpdate(\r\n      complaintId,\r\n      {\r\n        assignedFaculty,\r\n        assignedAt: new Date()\r\n      },\r\n      { new: true }\r\n    ).populate('assignedFaculty');\r\n\r\n    if (!updatedComplaint) {\r\n      return res.status(404).json({ message: 'Complaint not found' });\r\n    }\r\n    res.status(200).json(updatedComplaint);\r\n  } catch (error) {\r\n    console.error('Error assigning faculty:', error);\r\n    res.status(500).json({ message: 'Error assigning Faculty', error });\r\n  }\r\n});\r\n\r\n// PUT /api/complaints/status/:id - Update complaint status\r\nrouter.put('/status/:id', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { status } = req.body;\r\n    const updatedComplaint = await Complaint.findByIdAndUpdate(id, { status }, { new: true });\r\n    if (!updatedComplaint) {\r\n      return res.status(404).json({ message: 'Complaint not found' });\r\n    }\r\n    res.json(updatedComplaint);\r\n  } catch (error) {\r\n    console.error('Error updating complaint status:', error);\r\n    res.status(500).json({ message: 'Error updating complaint status', error });\r\n  }\r\n});\r\n\r\n// DELETE /api/complaints/:id - Delete a complaint by ID\r\nrouter.delete('/:id', async (req, res) => {\r\n  try {\r\n    const deletedComplaint = await Complaint.findByIdAndDelete(req.params.id);\r\n    if (!deletedComplaint) {\r\n      return res.status(404).json({ message: 'Complaint not found' });\r\n    }\r\n    res.status(200).json({ message: 'Complaint deleted successfully' });\r\n  } catch (error) {\r\n    console.error('Error deleting complaint:', error);\r\n    res.status(500).json({ message: 'Error deleting complaint', error });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}